#install specific version of libraries used in lab
import pandas as pd
import numpy as np
import seaborn as sns

#upload file
df = pd.read_csv ('clean_df2.csv')

#transfering numeric data to dh
dh=df._get_numeric_data()

#export libraries
from ipywidgets import interact, interactive, fixed, interact_manual

def DistributionPlot(RedFunction, BlueFunction, RedName, BlueName, Title):
    #define chart size
    width = 12
    height = 10
    plt.figure(figsize=(width, height))
    
    #define first graph style and second graph style
    ax1 = sns.distplot(RedFunction, hist=False, color="r", label=RedName)
    ax2 = sns.distplot(BlueFunction, hist=False, color="b", label=BlueName, ax=ax1)
    
    #define titles and axis
    plt.title(Title)
    plt.xlabel('Price (in dollars)')
    plt.ylabel('Proportion of Cars')
    
    #show plot
    plt.show()
    plt.close()


def PollyPlot(xtrain, xtest, y_train, y_test, lr, poly_transform):
    width = 12
    height = 10
    plt.figure(figsize=(width, height))
    
    
    #training data 
    #testing data 
    #lr:  linear regression object 
    #poly_transform:  polynomial transformation object 
    
    #get spaced vales within a given interval
    xmax=max([xtrain.values.max(), xtest.values.max()])
    xmin=min([xtrain.values.min(), xtest.values.min()])
    x=np.arange(xmin, xmax, 0.1)
     

    #draw garph for tarning data  
    plt.plot(xtrain, y_train, 'ro', label='Training Data')
    #draw garph for testing data 
    plt.plot(xtest, y_test, 'go', label='Test Data')
    #draw garph for predicted function
    plt.plot(x, lr.predict(poly_transform.fit_transform(x.reshape(-1, 1))), label='Predicted Function')
    #adjust x-limits and y-limits of the current axes.
    plt.ylim([-10000, 60000])
    plt.ylabel('Price')
    plt.legend() 
    
#place the target data price in a separate dataframe y_data
y_data = dh['price']
x_data=dh.drop('price',axis=1)


#import train_test_split library  
from sklearn.model_selection import train_test_split

#get 10% of dataset as test split 
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.10, random_state=1)

#print results
print("number of test samples :", x_test.shape[0])
print("number of training samples:",x_train.shape[0])

#create linear regression object 
from sklearn.linear_model import LinearRegression
lre=LinearRegression()

#train it on horsepower data set
lre.fit(x_train[['horsepower']], y_train)

#Let's calculate the R^2(Coefficient of determination) on the test data:
lre.score(x_test[['horsepower']], y_test)

#Let's calculate the R^2(Coefficient of determination) on the train data:
lre.score(x_train[['horsepower']], y_train)


#CROSS VALIDATION
from sklearn.model_selection import cross_val_score

#Calcalate cross validation for horsepower
Rcross = cross_val_score(lre, x_data[['horsepower']], y_data, cv=4)

#calculate the average and standard deviation of our estimate:
print("The mean of the folds are", Rcross.mean(), "and the standard deviation is" , Rcross.std())

#We can use negative squared error as a score by setting the parameter 'scoring' metric to 'neg_mean_squared_error'.
-1 * cross_val_score(lre,x_data[['horsepower']], y_data,cv=4,scoring='neg_mean_squared_error')

from sklearn.model_selection import cross_val_predict

yhat = cross_val_predict(lre,x_data[['horsepower']], y_data,cv=4)
yhat[0:5]


#Linear Regression
lr = LinearRegression()
lr.fit(x_train[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']], y_train)

#Prediction using training data
yhat_train = lr.predict(x_train[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])
yhat_train[0:5]

#Prediction using testing data
yhat_test = lr.predict(x_test[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])
yhat_test[0:5]

#import libs
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

#view graphs
Title = 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution'
DistributionPlot(y_train, yhat_train, "Actual Values (Train)", "Predicted Values (Train)", Title)


Title='Distribution  Plot of  Predicted Value Using Test Data vs Data Distribution of Test Data'
DistributionPlot(y_test,yhat_test,"Actual Values (Test)","Predicted Values (Test)",Title)


#POLINOMIAL REGRESSION
from sklearn.preprocessing import PolynomialFeatures

#Split 
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.45, random_state=0)

#Generate a new feature matrix consisting of all polynomial combinations
pr = PolynomialFeatures(degree=5)
x_train_pr = pr.fit_transform(x_train[['horsepower']])
x_test_pr = pr.fit_transform(x_test[['horsepower']])
pr
#######WHAT IS IT   

#create a Linear Regression model "poly" and train it.
poly = LinearRegression()
poly.fit(x_train_pr, y_train)

yhat = poly.predict(x_test_pr)
yhat[0:5]

#compare predicted values and true values
print("Predicted values:", yhat[0:4])
print("True values:", y_test[0:4].values)

#plot graph to compare functions 
PollyPlot(x_train[['horsepower']], x_test[['horsepower']], y_train, y_test, poly,pr)


#calculate scores R^2
poly.score(x_train_pr, y_train)
poly.score(x_test_pr, y_test)
#######почему он отрицательный ? 


Rsqu_test = []

order = [1, 2, 3, 4]
for n in order:
    pr = PolynomialFeatures(degree=n)
    
    x_train_pr = pr.fit_transform(x_train[['horsepower']])
    
    x_test_pr = pr.fit_transform(x_test[['horsepower']])    
    
    lr.fit(x_train_pr, y_train)
    
    Rsqu_test.append(lr.score(x_test_pr, y_test))

plt.plot(order, Rsqu_test)
plt.xlabel('order')
plt.ylabel('R^2')
plt.title('R^2 Using Test Data')
plt.text(3, 0.75, 'Maximum R^2 ')    


#The following interface allows you to experiment with different polynomial orders and different amounts of data.
def f(order, test_data):
    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=test_data, random_state=0)
    pr = PolynomialFeatures(degree=order)
    x_train_pr = pr.fit_transform(x_train[['horsepower']])
    x_test_pr = pr.fit_transform(x_test[['horsepower']])
    poly = LinearRegression()
    poly.fit(x_train_pr,y_train)
    PollyPlot(x_train[['horsepower']], x_test[['horsepower']], y_train,y_test, poly, pr)

#Create polynimial features object with degree of 2  
pr1=PolynomialFeatures(degree=2)

#Transform the training and testing samples for the features 'horsepower', 'curb-weight', 'engine-size' and 'highway-mpg'.
x_train_pr1=pr1.fit_transform(x_train[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])
x_test_pr1=pr1.fit_transform(x_test[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])

#calcaulate number of demensions
x_train_pr1.shape 

# create linear model 
poly1 = LinearRegression()
poly1.fit(x_train_pr1,y_train)

# predict values 
yhat_test1=poly1.predict(x_test_pr1)
DistributionPlot(y_test, yhat_test1, "Actual Values (Test)", "Predicted Values (Test)", Title)


#RIDGE REGRESSION
pr=PolynomialFeatures(degree=2)
x_train_pr=pr.fit_transform(x_train[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg','normalized-losses','symboling']])
x_test_pr=pr.fit_transform(x_test[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg','normalized-losses','symboling']])

#import lib
from sklearn.linear_model import Ridge

#create a Ridge regression object, setting the regularization parameter (alpha) to 0.1
RigeModel=Ridge(alpha=1)

#fit the model
RigeModel.fit(x_train_pr, y_train)

#Similarly, you can obtain a prediction:
yhat = RigeModel.predict(x_test_pr)

#compare the first five predicted samples to our test set in first 20 results
plt.scatter(range(len(yhat[0:20])), yhat[0:20])
plt.scatter(range(len(y_test[0:20])), y_test[0:20])
plt.show()

#We have also created a progress bar to see how many iterations we have completed so far.
from tqdm import tqdm

Rsqu_test = []
Rsqu_train = []
dummy1 = []
Alpha = 10 * np.array(range(0,1000))
pbar = tqdm(Alpha)

for alpha in pbar:
    RigeModel = Ridge(alpha=alpha) 
    RigeModel.fit(x_train_pr, y_train)
    test_score, train_score = RigeModel.score(x_test_pr, y_test), RigeModel.score(x_train_pr, y_train)
    
    pbar.set_postfix({"Test Score": test_score, "Train Score": train_score})

    Rsqu_test.append(test_score)
    Rsqu_train.append(train_score)



#We can plot out the value of R^2 for different alphas:
from tqdm import tqdm

Rsqu_test = []
Rsqu_train = []
dummy1 = []
Alpha = 10 * np.array(range(0,1000))
pbar = tqdm(Alpha)

for alpha in pbar:
    RigeModel = Ridge(alpha=alpha) 
    RigeModel.fit(x_train_pr, y_train)
    test_score, train_score = RigeModel.score(x_test_pr, y_test), RigeModel.score(x_train_pr, y_train)
    
    pbar.set_postfix({"Test Score": test_score, "Train Score": train_score})

    Rsqu_test.append(test_score)
    Rsqu_train.append(train_score)


width = 12
height = 10
plt.figure(figsize=(width, height))

plt.plot(Alpha,Rsqu_test, label='validation data  ')
plt.plot(Alpha,Rsqu_train, 'r', label='training Data ')
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.legend()


RigeModel = Ridge(alpha=10) 
RigeModel.fit(x_train_pr, y_train)
RigeModel.score(x_test_pr, y_test)

#GRID SEARCH
from sklearn.model_selection import GridSearchCV
parameters1= [{'alpha': [0.001,0.1,1, 10, 100, 1000, 10000, 100000, 100000]}]
parameters1

#Create a Ridge regression object:
RR=Ridge()
RR

#Create a ridge grid search object:
Grid1 = GridSearchCV(RR, parameters1,cv=4)

#Fit the model:
Grid1.fit(x_data[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']], y_data)

#Fine best estimator
BestRR=Grid1.best_estimator_

#Find score for best estimator
BestRR.score(x_test[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']], y_test)

#Find alpha and best normalize
parameters2= [{'alpha': [0.001,0.1,1, 10, 100, 1000,10000,100000,100000],'normalize':[True,False]} ]
Grid2 = GridSearchCV(Ridge(), parameters2,cv=4)
Grid2.fit(x_data[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']],y_data)
Grid2.best_estimator_

#Find  predicted value
yhat_test2 = Grid2.predict(x_data[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])

#Check the graph
plt.scatter(range(len(yhat[0:50])), yhat[0:50])
plt.scatter(range(len(yhat_test2[0:50])), yhat_test2[0:50])
plt.show()