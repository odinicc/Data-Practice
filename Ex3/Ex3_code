#import lib
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline 
import pandas as pd
import numpy as np

#import file
import pandas as pd
df = pd.read_csv('clean_df2.csv')

#check correlation
df[['bore', 'stroke', 'compression-ratio', 'horsepower']].corr()

# Engine size etc. as potential predictor variable of price
sns.regplot(x="engine-size", y="price", data=df)
plt.ylim(0,)

df[["engine-size", "price"]].corr()
sns.regplot(x="highway-mpg", y="price", data=df)
df[['highway-mpg', 'price']].corr()

sns.regplot(x="peak-rpm", y="price", data=df)
df[['peak-rpm','price']].corr()

sns.regplot(x="stroke", y="price", data=df)


############# CATEGORICAL VARIABLES #############
sns.boxplot(x="body-style", y="price", data=df)
sns.boxplot(x="engine-location", y="price", data=df)
sns.boxplot(x="drive-wheels", y="price", data=df)


#count different values
df['drive-wheels'].value_counts()

#convert series to dataframe
df['drive-wheels'].value_counts().to_frame()

#Create new dataframe drive_wheels_counts
drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()
drive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)
drive_wheels_counts

#Add index name
drive_wheels_counts.index.name = 'drive-wheels'
drive_wheels_counts

#Create new dataframe engine_loc_counts
engine_loc_counts = df['engine-location'].value_counts().to_frame()
engine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)
engine_loc_counts.index.name = 'engine-location'
engine_loc_counts.head(10)

############# GROUPING #############
#First group
df['drive-wheels'].unique()
df_group_one
df_group_one = df_group_one.groupby(['drive-wheels'],as_index=False).mean()
df_group_one

#Second group
df_gptest = df[['drive-wheels','body-style','price']]
grouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()
grouped_test1

#Create pivot group
grouped_pivot = grouped_test1.pivot(index='drive-wheels',columns='body-style')
grouped_pivot

#Price by bodystile
df_group_three = df[['body-style','price']]
df_group_three = df_group_three.groupby(['body-style'],as_index=False).mean()
df_group_three

#Use heatmap to visualize
plt.pcolor(grouped_pivot, cmap='RdBu')
plt.colorbar()
plt.show()

fig, ax = plt.subplots()
im = ax.pcolor(grouped_pivot, cmap='RdBu')

#label names
row_labels = grouped_pivot.columns.levels[1]
col_labels = grouped_pivot.index

#move ticks and labels to the center
ax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)

#insert labels
ax.set_xticklabels(row_labels, minor=False)
ax.set_yticklabels(col_labels, minor=False)

#rotate label if too long
plt.xticks(rotation=90)

fig.colorbar(im)
plt.show()

#import library
from scipy import stats

pearson_coef, p_value = stats.pearsonr(df['city-mpg'], df['price'])
print("The Pearson Correlation Coefficient is", pearson_coef, " with a P-value of P = ", p_value)  

######ANOVA######

grouped_test2=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])
grouped_test2.head(2)   
grouped_test2.get_group('4wd')['price']

#calculate F-test score and P-value.
f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'], grouped_test2.get_group('4wd')['price'])  
 print( "ANOVA results: F=", f_val, ", P =", p_val)
 
 f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('rwd')['price'])
 
 print("ANOVA results: F=", f_val, ", P =", p_val)  